// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: proto/kvdb.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KVDB_Put_FullMethodName         = "/proto.KVDB/Put"
	KVDB_Get_FullMethodName         = "/proto.KVDB/Get"
	KVDB_Delete_FullMethodName      = "/proto.KVDB/Delete"
	KVDB_ListAllData_FullMethodName = "/proto.KVDB/ListAllData"
)

// KVDBClient is the client API for KVDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KVDBClient interface {
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*Empty, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Empty, error)
	ListAllData(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListAllDataResponse, error)
}

type kVDBClient struct {
	cc grpc.ClientConnInterface
}

func NewKVDBClient(cc grpc.ClientConnInterface) KVDBClient {
	return &kVDBClient{cc}
}

func (c *kVDBClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, KVDB_Put_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVDBClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, KVDB_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVDBClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, KVDB_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVDBClient) ListAllData(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListAllDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAllDataResponse)
	err := c.cc.Invoke(ctx, KVDB_ListAllData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KVDBServer is the server API for KVDB service.
// All implementations must embed UnimplementedKVDBServer
// for forward compatibility.
type KVDBServer interface {
	Put(context.Context, *PutRequest) (*Empty, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Delete(context.Context, *DeleteRequest) (*Empty, error)
	ListAllData(context.Context, *Empty) (*ListAllDataResponse, error)
	mustEmbedUnimplementedKVDBServer()
}

// UnimplementedKVDBServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKVDBServer struct{}

func (UnimplementedKVDBServer) Put(context.Context, *PutRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedKVDBServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedKVDBServer) Delete(context.Context, *DeleteRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedKVDBServer) ListAllData(context.Context, *Empty) (*ListAllDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllData not implemented")
}
func (UnimplementedKVDBServer) mustEmbedUnimplementedKVDBServer() {}
func (UnimplementedKVDBServer) testEmbeddedByValue()              {}

// UnsafeKVDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KVDBServer will
// result in compilation errors.
type UnsafeKVDBServer interface {
	mustEmbedUnimplementedKVDBServer()
}

func RegisterKVDBServer(s grpc.ServiceRegistrar, srv KVDBServer) {
	// If the following call panics, it indicates UnimplementedKVDBServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KVDB_ServiceDesc, srv)
}

func _KVDB_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVDBServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVDB_Put_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVDBServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVDB_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVDBServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVDB_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVDBServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVDB_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVDBServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVDB_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVDBServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KVDB_ListAllData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVDBServer).ListAllData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KVDB_ListAllData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVDBServer).ListAllData(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// KVDB_ServiceDesc is the grpc.ServiceDesc for KVDB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KVDB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.KVDB",
	HandlerType: (*KVDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _KVDB_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _KVDB_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _KVDB_Delete_Handler,
		},
		{
			MethodName: "ListAllData",
			Handler:    _KVDB_ListAllData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/kvdb.proto",
}
